name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      skip_checks:
        description: 'Skip CI checks (use with caution)'
        required: false
        type: boolean
        default: false

jobs:
  verify-ci:
    name: Verify CI Status
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_checks }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get commit SHA for tag
        id: get_sha
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            COMMIT_SHA="${{ github.sha }}"
          else
            # For workflow_dispatch, get the current HEAD
            COMMIT_SHA=$(git rev-parse HEAD)
          fi
          echo "sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "Checking CI status for commit: $COMMIT_SHA"
          
      - name: Check CI workflow status
        uses: actions/github-script@v7
        with:
          script: |
            const sha = '${{ steps.get_sha.outputs.sha }}';
            
            // Get all check runs for this commit
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: sha
            });
            
            // Filter for CI workflow
            const ciRuns = checkRuns.check_runs.filter(run => 
              run.name.includes('CI') || 
              run.name.includes('Test') || 
              run.name.includes('Build') ||
              run.name.includes('TypeScript Check') ||
              run.name.includes('Lint')
            );
            
            // Check if any CI jobs failed
            const failedRuns = ciRuns.filter(run => 
              run.status === 'completed' && run.conclusion !== 'success'
            );
            
            if (failedRuns.length > 0) {
              console.log('Failed CI checks:', failedRuns.map(r => ({
                name: r.name,
                conclusion: r.conclusion
              })));
              core.setFailed('CI checks failed. Fix issues before releasing.');
            } else if (ciRuns.length === 0) {
              core.warning('No CI checks found for this commit. Proceeding with caution.');
            } else {
              console.log('All CI checks passed!');
            }

  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    needs: [verify-ci]
    if: ${{ always() && (needs.verify-ci.result == 'success' || inputs.skip_checks) }}
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run tests
        run: npm test -- --ci
        
      - name: Build plugin
        run: npm run build
        
      - name: Create plugin package
        run: |
          mkdir -p figma-design-lint
          cp -r dist/* figma-design-lint/
          cp manifest.json figma-design-lint/
          cp README.md figma-design-lint/
          zip -r figma-design-lint.zip figma-design-lint
          
      - name: Generate changelog
        id: changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          # Get commit messages since last tag
          if [ -z "$(git tag)" ]; then
            git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
          else
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              git log ${LAST_TAG}..HEAD --pretty=format:"* %s (%h)" >> CHANGELOG.md
            else
              git log --pretty=format:"* %s (%h)" >> CHANGELOG.md
            fi
          fi
          echo "" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")...${{ github.ref_name }}" >> CHANGELOG.md
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          files: |
            figma-design-lint.zip
            dist/*.js
            dist/*.html
          draft: false
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
          generate_release_notes: true
          
  publish-to-figma:
    name: Publish to Figma Community
    runs-on: ubuntu-latest
    needs: [verify-ci, build-and-release]
    if: ${{ always() && needs.build-and-release.result == 'success' && !contains(github.ref_name, '-beta') && !contains(github.ref_name, '-alpha') }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build plugin
        run: npm run build
        
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version number
          VERSION="${{ github.ref_name }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release notes
          NOTES="## Version $VERSION"
          NOTES+=$'\n\n'
          
          # Get commit messages since last tag
          if [ -z "$(git tag)" ]; then
            NOTES+=$(git log --pretty=format:"- %s" | head -10)
          else
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              NOTES+=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" | head -10)
            else
              NOTES+=$(git log --pretty=format:"- %s" | head -10)
            fi
          fi
          
          # Save release notes to output for the deploy action
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "notes<<$EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
      - name: Extract Plugin Info from manifest
        id: plugin_info
        run: |
          PLUGIN_ID=$(jq -r '.id' manifest.json)
          TEAM_ID=$(jq -r '.teamId // empty' manifest.json)
          echo "plugin_id=$PLUGIN_ID" >> $GITHUB_OUTPUT
          echo "team_id=$TEAM_ID" >> $GITHUB_OUTPUT
          echo "Plugin ID: $PLUGIN_ID"
          echo "Team ID: $TEAM_ID"
          
      - name: Deploy to Figma
        id: deploy
        uses: typper-io/figma-plugin-deploy@v1
        with:
          plugin-id: ${{ steps.plugin_info.outputs.plugin_id }}
          team-id: ${{ steps.plugin_info.outputs.team_id }}
          release-notes: ${{ steps.release_notes.outputs.notes }}
        env:
          FIGMA_EMAIL: ${{ secrets.FIGMA_EMAIL }}
          FIGMA_PASSWORD: ${{ secrets.FIGMA_PASSWORD }}
          FIGMA_TOTP_SECRET: ${{ secrets.FIGMA_TOTP_SECRET || '' }}
        continue-on-error: true # Don't fail the workflow if deployment fails
        
      - name: Deployment Status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" == "success" ]; then
            echo "✅ Plugin successfully deployed to Figma Community!" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Automated deployment failed. Manual publishing required." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 📦 Manual Publishing Steps" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "1. Download the release assets from the release page" >> $GITHUB_STEP_SUMMARY
            echo "2. Go to Figma Plugin publish/update page" >> $GITHUB_STEP_SUMMARY
            echo "3. Upload the new version" >> $GITHUB_STEP_SUMMARY
            echo "4. Update the version notes with the changelog" >> $GITHUB_STEP_SUMMARY
            echo "5. Submit for review" >> $GITHUB_STEP_SUMMARY
          fi